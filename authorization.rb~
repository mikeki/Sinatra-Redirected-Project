module Sinatra
  module Authorization
  ADMIN = "username"
  ADMIN_PASS = "password"
  
  def auth
    @auth ||= Rack::Auth::Basic::Request.new(request.env)
    
  end
 
  def unauthorized!
    throw :halt, [ 401, 'Authorization Required' ]
  end
 
  def bad_request!
    throw :halt, [ 400, 'Bad Request' ]
  end
 
  def authorized?
    request.env['REMOTE_USER']
  end
 
  def authorize(username, password)
    if username == ADMIN and password == ADMIN_PASS
      @auth ||= Rack::Auth::Basic::Request.new(request.env)
      @auth.provided? && @auth.basic? && @auth.credentials && @auth.credentials == [username, password]
      redirect '/admin'
    else
      throw :halt, [ 403, 'Forbidden' ]
    end
  end
 
  def require_administrative_privileges
    return if authorized?
    unauthorized! unless auth.provided?
    bad_request! unless auth.basic?
    unauthorized! unless authorize(*auth.credentials)
    request.env['REMOTE_USER'] = auth.username
  end
 
  def admin?
    authorized?
  end
 
  end
end
